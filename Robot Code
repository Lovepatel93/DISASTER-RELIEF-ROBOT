sim=require'sim'
simUI=require'simUI'

function initialize()
    numDetected = 0
    detectSensor=sim.getObject("./sensingNose_To_Detect")
    
    bubbleRob=sim.getObject('.')
    motorLeft=sim.getObject("./leftMotor")
    motorRight=sim.getObject("./rightMotor")
    sensorNose=sim.getObject("./sensingNose")
    speedRange={50*math.pi/180,300*math.pi/180}
    reverseTime=-1
    robotGroup=sim.createCollection(0)
    sim.addItemToCollection(robotGroup,sim.handle_tree,bubbleRob,0)
    distLine=sim.addDrawingObject(sim.drawing_lines,4,0,-1,1,{0,1,0})
    trace=sim.addDrawingObject(sim.drawing_linestrip+sim.drawing_cyclic,2,0,-1,200,{1,1,0},nil,nil,{1,1,0})
    graphHandle=sim.getObject('./graph')
    distanceStream=sim.addGraphStream(graphHandle,'bubbleRob distance','m',0,{1,0,0})
    
    uiLayout = '<ui title="'..sim.getObjectAlias(bubbleRob,1)..' speed" closeable="false" resizeable="false" activate="false">'..[[
                <hslider minimum="0" maximum="100" on-change="adjustSpeed" id="1"/>
            <label text="" style="* {margin-left: 300px;}"/>
        </ui>
        ]]
    uiHandle=simUI.create(uiLayout)
    currentSpeed=(speedRange[1]+speedRange[2])*0.5
    simUI.setSliderValue(uiHandle,1,100*(currentSpeed-speedRange[1])/(speedRange[2]-speedRange[1]))
end

function sensing()
    local check,distanceData=sim.checkDistance(robotGroup,sim.handle_all)
    if check>0 then
        sim.addDrawingObjectItem(distLine,nil)
        sim.addDrawingObjectItem(distLine,distanceData)
        sim.setGraphStreamValue(graphHandle,distanceStream,distanceData[7])
    end
    local pos=sim.getObjectPosition(bubbleRob)
    sim.addDrawingObjectItem(trace,pos)
end 

function adjustSpeed(ui,id,value)
    currentSpeed=speedRange[1]+(speedRange[2]-speedRange[1])*value/100
end

function actuation()
    reading=sim.readProximitySensor(sensorNose)
    if (reading>0) then reverseTime=sim.getSimulationTime()+4 end 

    if (reverseTime<sim.getSimulationTime()) then
        sim.setJointTargetVelocity(motorLeft,currentSpeed)
        sim.setJointTargetVelocity(motorRight,currentSpeed)
    else
        sim.setJointTargetVelocity(motorLeft,-currentSpeed/2)
        sim.setJointTargetVelocity(motorRight,-currentSpeed/8)
    end
    local detectReading,distance,detectPoint,detectObjHandle=sim.readProximitySensor(detectSensor)
    if (detectReading>0) then    
        if detectObjHandle then
            if sim.getObjectAlias(detectObjHandle) == 'Cylinder_To_Detect' then
                numDetected =  numDetected + 1
                print("Target Cylinder detected! Count: " .. tostring(numDetected) .." - " .. tostring(sim.getObjectAlias(detectObjHandle)))
                sim.setObjectColor(detectSensor,0,sim.colorcomponent_ambient_diffuse,{0,1,0})
            end
        end
    else
        sim.setObjectColor(detectSensor,0,sim.colorcomponent_ambient_diffuse,{0,0,1})
    end
end

function cleanup() 
    simUI.destroy(uiHandle)
end

sysCall_init = initialize
sysCall_sensing = sensing
sysCall_actuation = actuation
sysCall_cleanup = cleanup
